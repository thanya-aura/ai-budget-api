# pdf_summary.py

# ‡πÉ‡∏ä‡πâ backend ‡πÅ‡∏ö‡∏ö headless ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ GUI/‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
import matplotlib
matplotlib.use("Agg")

import matplotlib.pyplot as plt
from io import BytesIO
from typing import Any

import pandas as pd
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
# PIL ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏Ñ‡∏á import ‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
# from PIL import Image

from .utils.number_format_utils import format_number
from .config import PERCENT_COLUMNS


def _safe_get_row_val(row: pd.Series, key: str, default: Any = 0) -> Any:
    """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß (Series) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ + ‡πÅ‡∏õ‡∏•‡∏á NaN ‡πÄ‡∏õ‡πá‡∏ô default"""
    try:
        val = row.get(key, default)
    except Exception:
        val = default
    try:
        if pd.isna(val):
            return default
    except Exception:
        pass
    return val


def generate_pdf_with_chart(
    df: pd.DataFrame,
    style_map: dict[str, str] | None = None,
    include_percent: bool = True
) -> BytesIO:
    """
    Generate PDF report with chart and formatted summary.
    - ‡∏Ñ‡πà‡∏≤ numeric ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    - format ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô render ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô PDF
    """
    if style_map is None:
        style_map = {
            "Planned": "number",
            "FX Adjusted Actual": "number",
            "Variance": "number",
        }
    if include_percent:
        for col in PERCENT_COLUMNS:
            style_map.setdefault(col, "percent")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if "Cost Center" not in df.columns:
        raise ValueError("DataFrame ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Cost Center'")

    for col in ["Planned", "FX Adjusted Actual", "Variance"]:
        if col not in df.columns:
            df[col] = 0

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠ Cost Center
    grouped = df.groupby("Cost Center", as_index=False).agg({
        "Planned": "sum",
        "FX Adjusted Actual": "sum",
        "Variance": "sum"
    })

    # ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢) ‡πÅ‡∏•‡∏∞ merge
    if include_percent and PERCENT_COLUMNS:
        for col in PERCENT_COLUMNS:
            if col in df.columns:
                avgdf = (
                    df.groupby("Cost Center", as_index=False)[col]
                    .mean(numeric_only=True)
                    .rename(columns={col: f"__avg__{col}"})
                )
                grouped = grouped.merge(avgdf, on="Cost Center", how="left")

    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if grouped.empty:
        grouped = pd.DataFrame(
            {"Cost Center": ["(no data)"], "Planned": [0], "FX Adjusted Actual": [0], "Variance": [0]}
        )

    # ----- ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü -----
    fig, ax = plt.subplots(figsize=(8, 4))
    bar_width = 0.35
    idx = list(range(len(grouped)))

    planned_vals = grouped["Planned"].fillna(0).tolist()
    actual_vals = grouped["FX Adjusted Actual"].fillna(0).tolist()

    ax.bar(idx, planned_vals, bar_width, label="Planned")
    ax.bar([i + bar_width for i in idx], actual_vals, bar_width, label="Actual")

    ax.set_xticks([i + bar_width / 2 for i in idx])
    ax.set_xticklabels(grouped["Cost Center"], rotation=20, ha="right")
    ax.set_ylabel("Cost (in units)")
    ax.set_title("Planned vs Actual by Cost Center")
    ax.legend()
    plt.tight_layout()

    chart_buffer = BytesIO()
    plt.savefig(chart_buffer, format="PNG", dpi=150)
    plt.close(fig)
    chart_buffer.seek(0)

    # ‚¨áÔ∏è ‡πÉ‡∏ä‡πâ ImageReader ‡∏Å‡∏±‡∏ö buffer ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    img_reader = ImageReader(chart_buffer)

    # ----- ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF -----
    pdf_buffer = BytesIO()
    c = canvas.Canvas(pdf_buffer, pagesize=A4)
    width, height = A4

    c.setFont("Helvetica-Bold", 16)
    c.drawString(60, height - 50, "üìä Budget Summary Report")
    c.setFont("Helvetica", 12)
    c.drawString(60, height - 80, f"Total Records: {len(df)}")

    # ‚¨áÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ drawImage (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤ drawInlineImage ‡∏Å‡∏±‡∏ö ImageReader)
    c.drawImage(img_reader, 60, height - 420, width=470, height=200, mask='auto')

    # Summary (‡∏°‡∏µ‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    c.setFont("Helvetica", 10)
    y = height - 460
    line_h = 18
    max_lines = int((y - 40) / line_h)
    lines = 0

    for _, row in grouped.iterrows():
        text = (
            f"{row['Cost Center']}: "
            f"Planned={format_number(_safe_get_row_val(row, 'Planned', 0), style_map.get('Planned', 'number'))}, "
            f"Actual={format_number(_safe_get_row_val(row, 'FX Adjusted Actual', 0), style_map.get('FX Adjusted Actual', 'number'))}, "
            f"Var={format_number(_safe_get_row_val(row, 'Variance', 0), style_map.get('Variance', 'number'))}"
        )

        if include_percent:
            for col in PERCENT_COLUMNS:
                avg_key = f"__avg__{col}"
                if avg_key in grouped.columns:
                    text += f", {col}={format_number(_safe_get_row_val(row, avg_key, 0), style_map.get(col, 'percent'))}"

        if lines >= max_lines:
            c.showPage()
            c.setFont("Helvetica-Bold", 16)
            c.drawString(60, height - 50, "üìä Budget Summary Report (cont.)")
            c.setFont("Helvetica", 10)
            y = height - 80
            lines = 0

        c.drawString(60, y, text)
        y -= line_h
        lines += 1

    c.showPage()
    c.save()
    pdf_buffer.seek(0)
    return pdf_buffer


def generate_pdf_default(df: pd.DataFrame) -> BytesIO:
    """Helper ‚Üí default format (percent columns ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)"""
    return generate_pdf_with_chart(df, include_percent=True)
